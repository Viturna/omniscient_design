<%= form_with(model: @designer, local: true) do |form| %>
  <% if @designer.errors.any? %>
    <div style="color: red">
      <h2><%= pluralize(@designer.errors.count, "erreur") %> interdit à ce designer d'être enregistré :</h2>
      <ul>
        <% @designer.errors.full_messages.each do |msg| %>
          <li><%= msg %></li>
        <% end %>
      </ul>
    </div>
  <% end %>
  <div class="flex-form">
    <div>
      <%= form.text_field :nom_designer, placeholder: "Nom du designer" %>
    </div>
    <div>
      <%= form.text_field :date_naissance, placeholder: "Année de naissance", class: "year-input", id: "birth-year-input" %>
      <div class="error-message" id="birth-year-error"></div>
    </div>
    <div>
      <%= form.text_field :date_deces, placeholder: "Année de décès (optionnel)", class: "year-input", id: "death-year-input" %>
      <div class="error-message" id="death-year-error"></div>
    </div>
    <div>
      <%= form.label :country_1, "Pays principal" %>
      <%= form.collection_select :country_ids, Country.order(:country), :id, :country,
    { prompt: "Sélectionner un pays", selected: @country_1 },
    { id: "country_1", name: "designer[country_ids][]" } %>
    </div>
    <div>
      <%= form.label :country_2, "Pays secondaire (optionnel)" %>
      <%= form.collection_select :country_ids, Country.order(:country), :id, :country,
    { prompt: "Sélectionner un pays", selected: @country_2 },
    { id: "country_2", name: "designer[country_ids][]" } %>
    </div>
    <div>
      <%= form.label :country_3, "Pays tertiaire (optionnel)" %>
      <%= form.collection_select :country_ids, Country.order(:country), :id, :country,
    { prompt: "Sélectionner un pays", selected: @country_3 },
    { id: "country_3", name: "designer[country_ids][]" } %>
    </div>
    <div>
      <%= form.text_area :presentation_generale, placeholder: "Présentation générale (Min. 200 caractères)" %>
    </div>
    <div>
      <%= form.text_area :formation_et_influences, placeholder: "Formation et influences (Min. 200 caractères)" %>
    </div>
    <div>
      <%= form.text_area :style_ou_philosophie, placeholder: "Style ou philosophie (Min. 200 caractères)" %>
    </div>
    <div>
      <%= form.text_area :creations_majeures, placeholder: "Ses créations majeures (Min. 200 caractères)" %>
    </div>
    <div>
      <%= form.text_area :heritage_et_impact, placeholder: "Héritage et impact (Min. 200 caractères)" %>
    </div>
    <div>
      <%= form.text_field :image, placeholder: "Url de l'image"%>
    </div>
    <!-- Ajoutez le champ caché pour reCAPTCHA -->
    <%= hidden_field_tag :recaptcha_token, nil, id: "recaptcha_token" %>
    <div>
      <%= form.submit "Continuer ⏩️", class: "button large" %>
    </div>
  </div>
<% end %>
<script>
  $(document).ready(function() {
    var birthYearInput = document.getElementById("birth-year-input");
    var deathYearInput = document.getElementById("death-year-input");
    var birthYearError = document.getElementById("birth-year-error");
    var deathYearError = document.getElementById("death-year-error");

    var currentYear = new Date().getFullYear();

    function validateYear(year, minYear, maxYear) {
      return !isNaN(year) && year >= minYear && year <= maxYear;
    }

    birthYearInput.addEventListener("input", function() {
      var birthYear = birthYearInput.value;

      if (!validateYear(birthYear, 0, currentYear)) {
        birthYearError.textContent = "Veuillez entrer une année de naissance valide entre 0 et " + currentYear;
      } else {
        birthYearError.textContent = "";
      }
    });

    deathYearInput.addEventListener("input", function() {
      var deathYear = deathYearInput.value;

      if (deathYear && !validateYear(deathYear, 0, currentYear)) {
        deathYearError.textContent = "Veuillez entrer une année de décès valide entre 0 et " + currentYear;
      } else {
        deathYearError.textContent = "";
      }
    });

    var form = document.querySelector("form");
    form.addEventListener("submit", function(event) {
      var birthYear = birthYearInput.value;
      var deathYear = deathYearInput.value;
      var errors = [];

      if (!validateYear(birthYear, 0, currentYear)) {
        birthYearError.textContent = "Veuillez entrer une année de naissance valide entre 0 et " + currentYear;
        errors.push("birthYearError");
      }

      if (deathYear && !validateYear(deathYear, 0, currentYear)) {
        deathYearError.textContent = "Veuillez entrer une année de décès valide entre 0 et " + currentYear;
        errors.push("deathYearError");
      }

      if (errors.length > 0) {
        event.preventDefault();
      }
    });
  });
</script>
<script>
  document.addEventListener("DOMContentLoaded", () => {
    const selects = document.querySelectorAll("select[id^='country_']");

    const updateOptions = () => {
      // Récupérer toutes les valeurs sélectionnées, en ignorant les sélecteurs vides
      const selectedValues = Array.from(selects)
        .map(select => select.value)
        .filter(value => value !== "");

      // Désactiver les options qui sont déjà sélectionnées dans d'autres champs
      selects.forEach(select => {
        Array.from(select.options).forEach(option => {
          option.disabled = selectedValues.includes(option.value) && option.value !== select.value;
        });
      });
    };

    // Appliquer l'écouteur pour détecter les changements de chaque select
    selects.forEach(select => {
      select.addEventListener("change", updateOptions);
    });

    // Mise à jour initiale au cas où des valeurs seraient pré-sélectionnées
    updateOptions();
  });
</script>
